# Hangar Bay - EVE Online Ship Ecommerce Platform - Design Specification

## 1. Introduction

This document outlines the design specification for Hangar Bay, an e-commerce application for buying and selling ships within the video game EVE Online. The application aims to provide a secure, user-friendly platform for players to trade ships.

## 2. Goals

*   To create a secure and reliable platform for discovering EVE Online public ship contracts.
*   To provide an intuitive user interface for browsing, searching, and filtering public ship contracts.
*   To integrate seamlessly with the EVE Online ESI API for up-to-date contract, ship, and market information.
*   To help players efficiently find desirable ship contracts available in-game.

## 3. Target Audience

*   EVE Online players looking to find and acquire ships through public contracts.
*   EVE Online players who have listed ships on public contracts and want to see them (or for others to find them easily).
*   Players interested in current ship availability and pricing via public contracts.

## 4. Security

**SECURITY IS ABSOLUTELY PARAMOUNT FOR THIS APPLICATION.**

EVE Online players, the target audience for Hangar Bay, are known for their ingenuity in exploiting systems. Theft, deceit, extortion, hacking, and scheming are considered legitimate parts of the EVE Online metagame. This application **will** be targeted by parties with malicious intent who will attempt to exploit it in every conceivable way. **WE MUST NOT LET THAT HAPPEN.**

*   **No Tradeoffs:** There must be NO tradeoffs where security is sacrificed for features, convenience, or performance.
*   **Overriding Concern:** Security must be an overriding concern in every applicable design and implementation area.
*   **Minimum Standards:** At an absolute minimum, the application MUST take extreme precautions against:
    1.  All **OWASP Top 10 Web Application Security Risks** (latest version).
    2.  All applicable **OWASP API Security Top 10 Risks** (latest version).
    3.  Employ leading/best **secure coding practices** for all languages, frameworks, and technologies used in the application.
*   **Proactive Threat Modeling:** We must proactively think through potential attack vectors and risks for the application and aggressively eliminate them by design or implement effective mitigations wherever possible.
*   **Risk Management:** Where attack vectors and risks cannot be effectively eliminated by design or mitigated, we must extensively think through possible alternatives. If no alternatives are feasible, the risk must be documented as clearly as possible, including its potential impact and likelihood.
*   **EVE SSO Security:** If EVE Single Sign-On (SSO) is used, access tokens and refresh tokens must be handled with utmost security, adhering to OAuth 2.0 best practices, including secure storage, transmission (HTTPS only), and minimal scope requests.
*   **Input Validation:** All user-supplied input (including API inputs from ESI) must be rigorously validated on both client and server sides to prevent injection attacks (SQLi, XSS, command injection, etc.).
*   **Output Encoding:** All data output to users must be properly encoded to prevent XSS attacks.
*   **Authentication & Authorization:** Robust authentication and authorization mechanisms must be implemented to ensure users can only access data and perform actions they are permitted to.
*   **Session Management:** Secure session management practices must be followed.
*   **Dependency Security:** All third-party libraries and dependencies must be kept up-to-date and monitored for vulnerabilities.
*   **Secure Infrastructure:** The application must be deployed on a secure infrastructure with appropriate network security, logging, and monitoring.
*   **Data Privacy:** Consideration must be given to any player data stored, ensuring it is minimized and protected.
*   **Regular Security Audits:** Plan for regular security reviews and penetration testing.

**All other sections of this design specification must include a reference to this Security section, with instructions to consider it an integral part of their respective specifications.**

## 5. Application Architecture (High-Level)

*(To be detailed further)*

The application will function as an aggregator of public EVE Online contracts, focusing on ship sales. Transactions will occur in-game by players accepting these public contracts.

*   **Frontend:** (e.g., Web interface - React, Vue, Angular, Svelte, etc.) - Responsible for displaying contracts and search/filter UI.
*   **Backend:** (e.g., API - Python/Django/Flask, Node.js/Express, Java/Spring, Ruby/Rails, etc.) - Responsible for fetching data from ESI, processing, storing, and serving it to the frontend.
*   **Database:** (e.g., PostgreSQL, MySQL, MongoDB, etc.) - Stores aggregated contract data, ship details (cached from ESI), and potentially user preferences if SSO is implemented.
*   **EVE ESI API Integration Layer:** A dedicated module/service for interacting with the ESI API, handling requests for public contracts, contract items, ship details, caching, and error management.

*Security Considerations: Refer to Section 4.* 

## 6. Tech Stack

*(To be determined based on requirements, team expertise, and scalability needs. Security capabilities of chosen technologies will be a major factor.)*

*Security Considerations: Refer to Section 4.* 

## 7. Core Features

Based on the **public contract aggregator model**:

*   **Public Contract Aggregation & Display:**
    *   Regularly fetch public item exchange and auction contracts from specified EVE Online regions.
    *   Filter contracts to identify those primarily offering ships.
    *   Display key contract details: ship type, name, quantity, price (ISK), contract type (auction/item exchange), location (station/structure), issuer, expiration date.
*   **Ship Browsing & Advanced Searching/Filtering:**
    *   Browse aggregated ship contracts.
    *   Search by ship name, type, or category (e.g., Frigate, Cruiser, Battleship).
    *   Filter by region, solar system, station/structure.
    *   Filter by price range, tech level, specific ship attributes (e.g., number of turret slots, drone bay capacity) if feasible by caching ship details.
    *   Sort results by price, expiration date, date listed.
*   **Detailed Ship Contract View:**
    *   Show comprehensive details for a selected ship contract, including all items in the contract (if it's a package).
    *   Display detailed ship attributes (hull, shield, armor, capacitor, speed, slots, bonuses, etc.) fetched from ESI `universe/types`.
    *   Provide information on how to find and accept the contract in-game (e.g., "Search for this contract under character [Issuer Name] in region [Region Name]").
*   **User Authentication (EVE SSO - Optional for MVP, for enhanced features):**
    *   If implemented: Allow users to log in with their EVE Online account.
    *   Potential features for authenticated users:
        *   Saved searches or watchlists for specific ship types or contract criteria.
        *   Notifications (e.g., email, in-app) when new matching contracts appear (requires careful consideration of ESI polling and user preferences).
        *   Ability to see their own public contracts highlighted.

*Security Considerations: Refer to Section 4. If EVE SSO is implemented, all security measures for token handling and user data protection are critical.* 

## 8. ESI API Integration Details

Primary ESI endpoints for the public contract aggregator model:

*   **Public Contracts:**
    *   `GET /v1/contracts/public/{region_id}/` - To retrieve a list of public contracts in a given region. Paginated. Cache: 300 seconds (5 minutes).
*   **Contract Items:**
    *   `GET /v1/contracts/public/items/{contract_id}/` - To retrieve items included in a specific public contract. Paginated. Cache: 3600 seconds (1 hour).
*   **Ship/Item Types:**
    *   `GET /v3/universe/types/{type_id}/` - To get detailed information about a specific item/ship type, including dogma attributes and effects. Cache: Varies (often long, e.g., 1 day or more), uses ETag.
    *   `POST /v1/universe/ids/` - To resolve names to IDs (e.g., character names for issuers, type names for ships if searching by name). Cache: 3600 seconds (1 hour).
*   **Market Data (Supplementary):**
    *   `GET /v1/markets/prices/` - To get an overview of market prices for all item types. Cache: 3600 seconds (1 hour).
    *   `GET /v1/markets/regions/{region_id}/history/` - For historical market data for a type in a region (contextual). Cache: 3600 seconds (1 hour).
    *   `GET /v1/markets/structures/{structure_id}/` - If contracts are in player-owned structures, to get market orders (contextual). Requires auth if structure is private. Cache: 300 seconds.
*   **Search (Optional, for finding specific types or issuers):**
    *   `GET /v2/search/` - Search across various categories like solar systems, stations, item types, characters. Cache: 3600 seconds (1 hour).
*   **Authentication with EVE SSO (Optional for MVP):**
    *   If implemented, will use OAuth 2.0 flow as defined by EVE Developers.
    *   Scopes would be minimal, e.g., `publicData` for basic identification, or potentially `esi-characters.read_contracts.v1` if we wanted to let users see their *own* (even non-public) contracts, though this deviates from the public aggregator model for general users.
*   **Data Caching Strategy:**
    *   Strictly adhere to ESI `Cache-Control` and `ETag` headers.
    *   Implement local caching in Hangar Bay's backend/database to reduce ESI load and improve response times for users.
*   **Rate Limiting & Error Handling:**
    *   Implement robust error handling for ESI API responses (e.g., 4xx, 5xx errors).
    *   Respect ESI's error rate limiting (stop making requests if a certain error percentage is hit).
*   **User-Agent Policy:**
    *   Set a descriptive User-Agent string for all ESI requests as per ESI best practices.

*Security Considerations: Refer to Section 4. All ESI interactions must be secure (HTTPS). If SSO is used, token handling is paramount.* 

## 9. Database Schema (Initial Thoughts)

*(To be detailed)*

*   Tables for users (if local accounts exist alongside EVE SSO), ship types (cached from ESI), listings/contracts, etc.

*Security Considerations: Refer to Section 4.* 

## 10. UI/UX Considerations

*(To be detailed)*

*   Intuitive navigation.
*   Clear presentation of complex ship and market data.
*   Responsive design for various screen sizes.
*   Emphasis on trust and security in the UI elements.

*Security Considerations: Refer to Section 4.* 

## 11. Deployment

*(To be detailed)*

*   Cloud platform (e.g., AWS, Azure, GCP) or other hosting.
*   CI/CD pipeline.

*Security Considerations: Refer to Section 4.* 

## 12. Future Enhancements

*(To be detailed)*

*   Price alerts.
*   Ship comparison tools.
*   Integration with other EVE Online tools/services (if APIs allow).
*   Support for other item types (modules, blueprints etc.).

*Security Considerations: Refer to Section 4.* 
